
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Rcan"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('Rcan')
Rcan 1.3.0, for help type ?Rcan. type example(Rcan) to see demo of the function.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Rcan-package")
> ### * Rcan-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rcan-package
> ### Title: R package to help managing and analysing cancer data
> ### Aliases: Rcan-package Rcan
> ### Keywords: package
> 
> ### ** Examples
> 
> data(csu_registry_data_2)
> 				  
> # ASR with standard error with missing age.
> df_asr <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+                   var_st_err = "st_err")

Population with less than 18 age group:

                         registry_label nb_age_group
                        Brazil, Goiania           17
                  China, Jiashan County           16
                             Costa Rica           16
                         Ecuador, Quito           16
                                Iceland           16
                India, Chennai (Madras)           16
                 India, Mumbay (Bombay)           16
                           India, Poona           16
                           Israel: Jews           16
                           Italy, Parma           17
                 Italy, Ragusa Province           17
                    Philippines, Manila           16
                    Poland, Cracow City           17
                              Singapore           17
                     Singapore: Chinese           17
                       Singapore: Malay           17
                               Slovenia           17
                   Thailand, Chiang Mai           16
                     Thailand, Songkhla           16
                Uganda, Kyadondo County           16
  USA, California, Los Angeles: Chinese           16
 USA, California, Los Angeles: Filipino           16
 USA, California, Los Angeles: Japanese           16
   USA, California, Los Angeles: Korean           16
  USA, California, San Francisco: Black           17
                USA, Connecticut: Black           16
           USA, Georgia, Atlanta: Black           17
                         registry_label nb_age_group

ASR have been computed for the age group 0-99+
> 
> df_asr[1:4,]	
  registry             registry_label sex year ethnic cases      py  asr st_err
1     3602 Australia, New South Wales   1 1983     99    41 2668049 1.35   0.21
2     3602 Australia, New South Wales   1 1984     99    48 2692083 1.52   0.22
3     3602 Australia, New South Wales   1 1985     99    54 2723253 1.74   0.24
4     3602 Australia, New South Wales   1 1986     99    68 2756990 2.07   0.25
> 
> # ASR with standard error with missing age.		  
> readline(prompt="Press [enter] to continue to EAPC")
Press [enter] to continue to EAPC
[1] ""
> 
> # EAPC with standard error		
> 	  
> df_eapc <- csu_eapc(df_asr,
+ 					"asr", "year",
+ 					group_by=c("registry", "registry_label", "sex", "ethnic" ))
EAPC with standard errors have been computed
> 					
> df_eapc[1:4,]	
  registry             registry_label sex ethnic     eapc   eapc_up   eapc_low
1     3602 Australia, New South Wales   1     99 5.383423  8.091317  2.7433664
2     3602 Australia, New South Wales   2     99 6.861043 11.967735  1.9872598
3     3603      Australia, Queensland   1     99 3.911843  6.682117  1.2135067
4     3603      Australia, Queensland   2     99 3.561324  8.185219 -0.8649436
> 
> # EAPC with standard error				  
> readline(prompt="Press [enter] to continue to age specific graph")
Press [enter] to continue to age specific graph
[1] ""
> 
> data(csu_registry_data_1)
> 
> # plot age specific rate for 1 population.
> df_colombia <- csu_registry_data_1[csu_registry_data_1$registry_label=="Colombia, Cali",]
> 
> csu_ageSpecific(df_colombia,
+ 			plot_title = "Colombia, Liver, male")
> 				
> # plot age specific rate for 1 population, and comparison with CI5X data.
> csu_ageSpecific(df_colombia,
+ 				plot_title = "Colombia, Liver, male",
+ 				CI5_comparison = "Liver")
the dotted grey line represente the mean for Liver cancer in CI5 X
> 				
> # plot age specific rate for 4 population, legend at the bottom and comparison with CI5X data.
> csu_ageSpecific(csu_registry_data_1,
+ 				group_by="registry_label",
+ 				legend=csu_trend_legend(position="bottom", nrow = 2),
+ 				plot_title = "Liver, male",
+ 				CI5_comparison = 7)
the dotted grey line represente the mean for Liver cancer in CI5 X
> 				
> 
> 
> 
> cleanEx()
> nameEx("csu_ageSpecific")
> ### * csu_ageSpecific
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_ageSpecific
> ### Title: csu_ageSpecific
> ### Aliases: csu_ageSpecific
> 
> ### ** Examples
> 
> 
> 	data(csu_registry_data_1)
> 	data(csu_registry_data_2)
> 
> 	# you can import your data from csv file using read.csv:
> 	# mydata <-  read.csv("mydata.csv", sep=",")
> 	
> 	# to select only 1 population.
> 	test <- csu_registry_data_1[csu_registry_data_1$registry_label=="Colombia, Cali",]
> 
> 	# plot age specific rate for 1 population.
> 	csu_ageSpecific(test,
+                 plot_title = "Colombia, Liver, male")
> 				
> 	# plot age specific rate for 1 population, and comparison with CI5X data.
> 	csu_ageSpecific(test,
+ 					plot_title = "Colombia, Liver, male",
+ 					CI5_comparison = "Liver")
the dotted grey line represente the mean for Liver cancer in CI5 X
> 
> 	# plot age specific rate for 4 population, legend at the bottom and comparison with CI5X data.
> 	csu_ageSpecific(csu_registry_data_1,
+ 					group_by="registry_label",
+ 					legend=csu_trend_legend(position="bottom", nrow = 2),
+ 					plot_title = "Liver, male",
+ 					CI5_comparison = 7)
the dotted grey line represente the mean for Liver cancer in CI5 X
> 	
> 	# plot age specific rate for 4 population, legend at the right.
> 	csu_ageSpecific(csu_registry_data_1,
+ 					group_by="registry_label",
+ 					legend=csu_trend_legend(position="right", right_space_margin = 6.5),
+ 					plot_title = "Liver, male")			  		  
> 
> 
> 
> cleanEx()
> nameEx("csu_asr")
> ### * csu_asr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_asr
> ### Title: csu_asr
> ### Aliases: csu_asr
> 
> ### ** Examples
> 
> data(csu_registry_data_1)
> data(csu_registry_data_2)
> 
> # you can import your data from csv file using read.csv:
> # mydata <-  read.csv("mydata.csv", sep=",")
> 
> # Age standardized rate (ASR) with no missing age cases.
> result <- csu_asr(csu_registry_data_1, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label" ),
+                   var_age_group = c("registry_label"))

Population with less than 18 age group:

          registry_label nb_age_group
 India, Chennai (Madras)           16
         South Australia           17

ASR have been computed for the age group 0-99+
> 				  
> # you can export your result as csv file using write.csv:
> # write.csv(result, file="result.csv")
> 				  
> # ASR,  with the percentage of correction due to missing age cases. 
> result <- csu_asr(csu_registry_data_1, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label" ),
+                   var_age_group = c("registry_label"),
+ 				  missing_age = 19,				  
+ 				  correction_info = TRUE)	

Population with less than 18 age group:

          registry_label nb_age_group
 India, Chennai (Madras)           16
         South Australia           17

ASR have been computed for the age group 0-99+
> 				  
> # ASR and standard error with missing age.
> result <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+                   var_st_err = "st_err",
+ 				  missing_age = 99)

Population with less than 18 age group:

                         registry_label nb_age_group
                        Brazil, Goiania           17
                  China, Jiashan County           16
                             Costa Rica           16
                         Ecuador, Quito           16
                                Iceland           16
                India, Chennai (Madras)           16
                 India, Mumbay (Bombay)           16
                           India, Poona           16
                           Israel: Jews           16
                           Italy, Parma           17
                 Italy, Ragusa Province           17
                    Philippines, Manila           16
                    Poland, Cracow City           17
                              Singapore           17
                     Singapore: Chinese           17
                       Singapore: Malay           17
                               Slovenia           17
                   Thailand, Chiang Mai           16
                     Thailand, Songkhla           16
                Uganda, Kyadondo County           16
  USA, California, Los Angeles: Chinese           16
 USA, California, Los Angeles: Filipino           16
 USA, California, Los Angeles: Japanese           16
   USA, California, Los Angeles: Korean           16
  USA, California, San Francisco: Black           17
                USA, Connecticut: Black           16
           USA, Georgia, Atlanta: Black           17
                         registry_label nb_age_group

ASR have been computed for the age group 0-99+
> 				  
> # Truncated ASR, 25-69 years.
> result <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+                   var_st_err = "st_err",
+ 				  first_age = 6, 
+ 				  last_age = 14,
+ 				  missing_age = 99)	
ASR have been computed for the age group 25-69
> 
> # Truncated ASR, 0-15 with denominator population = 1000000. 
> result <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+                   var_st_err = "st_err",
+ 				  first_age = 1, 
+ 				  last_age = 3, 
+ 				  missing_age = 99,	
+ 				  db_rate = 1000000)		
ASR have been computed for the age group 0-14
> 				  
> # ASR with EURO population as reference (instead of SEGI)
> result <- csu_asr(csu_registry_data_1, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label" ),
+                   var_age_group = c("registry_label"),
+ 				  missing_age = 19,
+                   pop_base = "EURO")

Population with less than 18 age group:

          registry_label nb_age_group
 India, Chennai (Madras)           16
         South Australia           17

ASR have been computed for the age group 0-99+
> 				    		  
> 
> 
> 
> cleanEx()
> nameEx("csu_ci5x_mean")
> ### * csu_ci5x_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_ci5x_mean
> ### Title: cancer registry data
> ### Aliases: csu_ci5x_mean
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(csu_registry_data_1)
> test <- csu_registry_data_1[csu_registry_data_1$registry_label=="Colombia, Cali",]
> csu_ageSpecific(test,
+                 plot_title = "Colombia, Liver, male",
+                 CI5_comparison = "Liver")
the dotted grey line represente the mean for Liver cancer in CI5 X
>  
> #See more examples here:
> help(csu_ageSpecific)
csu_ageSpecific              package:Rcan              R Documentation

_c_s_u__a_g_e_S_p_e_c_i_f_i_c

_D_e_s_c_r_i_p_t_i_o_n:

     'csu_ageSpecific' calculate and plot Age-Specific Rate.

_U_s_a_g_e:

     csu_ageSpecific(df_data,
                     var_age="age",
                     var_cases="cases",
                     var_py="py",
                     group_by = NULL,
                     missing_age = NULL,
                     db_rate = 100000,
                     legend = csu_trend_legend(),
                     CI5_comparison = NULL,
                     var_rate = "rate",
                     plot_title = "csu_title",
                     format_export = NULL)
     
_A_r_g_u_m_e_n_t_s:

 df_data: Data (need to be R 'data.frame' format, see example to import
          csv file).

 var_age: Age group variable: (numerical) 18 5-years age-group, 0-4,
          5-9, .. 85+ and an optional missing age.
          The value can be 1,2..19, as well as 0,5,..85 or other value
          as long are they are numerical.

var_cases: Number of event (cases, deaths, ...) variable.

  var_py: Population year variable.

group_by: Variable to compare different age specific rate (sex,
          country, cancer ...).
          Only one variable can be chosen.

missing_age: Age value representing the missing age cases.

 db_rate: The denominator population. Default is 100000.

  legend: Legend option: see 'csu_trend_legend'.
          Use only if 'group_by' is not 'NULL'.

CI5_comparison: Add a dotted line represnting the CI5X for a specific
          cancer.
          Value can be a cancer_label (example: "Liver"), or a
          cancer_code (example = 7).
          See 'csu_ci5x_mean' to get the list of possible values.

var_rate: Name of the age specific variable if a dataframe is return.

plot_title: Title of the plot.

format_export: export the graph in different format:

            'NULL'    Plot in R studio windows.                                               
            '"pdf"'   Export in PDF format.                                                   
            '"tiff"'  Export in TIFF 300dpi format.                                           
            '"png"'   Export in PNG 200dpi format.                                            
            '"svg"'   Export in SVG format. Can be edit with <URL: https://inkscape.org/fr/>. 
           
          The filename is the 'plot_title' option.

_D_e_t_a_i_l_s:

     This function calculate and plot the age specific rate.  The
     'group_by' option allow to compare different population or cancer.
     The 'CI5_comparison' option allow to compare with the CI5X and
     therefore test the quality of the data.  If the population data
     stops before 85+ (75+ for instance), the population data *must* be
     0 when the population data is unknown so, the program can detect
     automatically the last age group (70+,75+,80+ or 85+) for
     population.

_V_a_l_u_e:

     Return a plot and a 'data.frame'.

_A_u_t_h_o_r(_s):

     Mathieu Laversanne

_R_e_f_e_r_e_n_c_e_s:

     <URL:
     https://www.iarc.fr/en/publications/pdfs-online/epi/sp95/sp95-chap11.pdf>

_S_e_e _A_l_s_o:

     'csu_asr' 'csu_eapc' 'csu_trend' 'csu_trendCohortPeriod'

_E_x_a_m_p_l_e_s:

             data(csu_registry_data_1)
             data(csu_registry_data_2)
     
             # you can import your data from csv file using read.csv:
             # mydata <-  read.csv("mydata.csv", sep=",")
             
             # to select only 1 population.
             test <- csu_registry_data_1[csu_registry_data_1$registry_label=="Colombia, Cali",]
     
             # plot age specific rate for 1 population.
             csu_ageSpecific(test,
                     plot_title = "Colombia, Liver, male")
                                     
             # plot age specific rate for 1 population, and comparison with CI5X data.
             csu_ageSpecific(test,
                                             plot_title = "Colombia, Liver, male",
                                             CI5_comparison = "Liver")
     
             # plot age specific rate for 4 population, legend at the bottom and comparison with CI5X data.
             csu_ageSpecific(csu_registry_data_1,
                                             group_by="registry_label",
                                             legend=csu_trend_legend(position="bottom", nrow = 2),
                                             plot_title = "Liver, male",
                                             CI5_comparison = 7)
             
             # plot age specific rate for 4 population, legend at the right.
             csu_ageSpecific(csu_registry_data_1,
                                             group_by="registry_label",
                                             legend=csu_trend_legend(position="right", right_space_margin = 6.5),
                                             plot_title = "Liver, male")                                       
     
> 
> 
> 
> 
> cleanEx()
> nameEx("csu_eapc")
> ### * csu_eapc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_eapc
> ### Title: csu_eapc
> ### Aliases: csu_eapc
> 
> ### ** Examples
> 
> 
> data(csu_registry_data_2)
> 
> # you import your data from csv file using read.csv:
> # mydata <-  read.csv("mydata.csv", sep=",")
> 
> # Estimated Annual Percentage Change (EAPC) base on ASR.
> 
> 
> df_asr <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+ 				  missing_age = 99)

Population with less than 18 age group:

                         registry_label nb_age_group
                        Brazil, Goiania           17
                  China, Jiashan County           16
                             Costa Rica           16
                         Ecuador, Quito           16
                                Iceland           16
                India, Chennai (Madras)           16
                 India, Mumbay (Bombay)           16
                           India, Poona           16
                           Israel: Jews           16
                           Italy, Parma           17
                 Italy, Ragusa Province           17
                    Philippines, Manila           16
                    Poland, Cracow City           17
                              Singapore           17
                     Singapore: Chinese           17
                       Singapore: Malay           17
                               Slovenia           17
                   Thailand, Chiang Mai           16
                     Thailand, Songkhla           16
                Uganda, Kyadondo County           16
  USA, California, Los Angeles: Chinese           16
 USA, California, Los Angeles: Filipino           16
 USA, California, Los Angeles: Japanese           16
   USA, California, Los Angeles: Korean           16
  USA, California, San Francisco: Black           17
                USA, Connecticut: Black           16
           USA, Georgia, Atlanta: Black           17
                         registry_label nb_age_group

ASR have been computed for the age group 0-99+
> 				  
> result <- csu_eapc(df_asr,
+ 					"asr", "year",
+ 					group_by=c("registry", "registry_label", "sex", "ethnic" ))
EAPC with standard errors have been computed
> 
> 				  
> # you can export your result as csv file using write.csv:
> # write.csv(result, file="result.csv")
> 				  		  
> 
> 
> 
> cleanEx()
> nameEx("csu_registry_data_1")
> ### * csu_registry_data_1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_registry_data_1
> ### Title: cancer registry data
> ### Aliases: csu_registry_data_1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(csu_registry_data_1)
> 
> # Age standardized rate (ASR) with no missing age cases.
> result <- csu_asr(csu_registry_data_1, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label" ),
+                   var_age_group = c("registry_label"))

Population with less than 18 age group:

          registry_label nb_age_group
 India, Chennai (Madras)           16
         South Australia           17

ASR have been computed for the age group 0-99+
> 				  
> #See more examples here:
> help(csu_asr)
csu_asr                  package:Rcan                  R Documentation

_c_s_u__a_s_r

_D_e_s_c_r_i_p_t_i_o_n:

     'csu_asr' calculate Age-Standardized Rate (ASR) and Truncated
     Age-Stadardized Rate (TASR) across different population (Registry,
     year, sex...)

_U_s_a_g_e:

     csu_asr(df_data,
                     var_age = "age",
                     var_cases = "cases",
                     var_py ="py",
                     group_by=NULL,
                     var_age_group=NULL,
                     missing_age = NULL,
                     db_rate = 100000,
                     first_age = 1,
                     last_age = 18,
                     pop_base = "SEGI",
                     var_st_err = NULL,
                     correction_info = FALSE,
                     var_asr = "asr",
                     age_dropped = FALSE)
     
_A_r_g_u_m_e_n_t_s:

 df_data: Data (need to be R 'data.frame' format, see example to import
          csv file).

 var_age: Age group variable: (numerical) 18 5-years age-group, 0-4,
          5-9, .. 85+ and an optional missing age.
          The value can be 1,2..19, as well as 0,5,..85 or other value
          as long are they are numerical.

var_cases: Number of event (cases, deaths, ...) variable.

  var_py: Population year variable.

group_by: A vector of variables to compare different ASR (sex, country,
          cancer ...).
          Any variable included in the next option var_age_group *must*
          be also include here.

var_age_group: Variables over which the number of population age-group
          might change.
          For example the last age group (70+, 75+, 80+ or 85+) can
          vary across registries, or year, but not across sex.

missing_age: Age value representing the missing age cases.
          If not precise, missing age value will not affect the
          calculation.

 db_rate: The denominator population. Default is 100000.

first_age: First age group included (for Truncated ASR), *must* be
          between 1 and 17. 1 represents 0-4, 2 represents 5-9, ... 5
          represente 20-24 etc.

last_age: Last age group included (for Truncated ASR), *must* be
          between 2 and 18. 2 represents 5-9, ... 5 represente 20-24,
          ... 18 represents 85+ etc.
          To calculate ASR for 15-69 years, use: 'first_age(4),
          last_age(14)'.

pop_base: Select the standard population:

            "SEGI"  SEGI world standard population.           
            "EURO"  EURO is the european standard population. 
           
var_st_err: Calculate the Standard error and name of the new variable.

correction_info: Logical value. if 'TRUE' compute the variable
          "correction" : percentage of missing age cases.

 var_asr: Name of the new variable for the ASR.

age_dropped: Only for truncated ASR.
          Logical value: if 'TRUE', considere the age group not used
          are already dropped from the data.
          First_age and last_age option *must* still be filled.

_D_e_t_a_i_l_s:

     This function take automatically account the number of age group
     (last age group can be 70+,75+,80+,85+):
     If the population data stops before 85+ (75+ for instance), the
     population data *must* be 0 when the population data is unknown
     so, the program can detect automatically the last age group
     (70+,75+,80+ or 85+) for population.

_V_a_l_u_e:

     Give the list of population with less than 18 age group (last age
     group: 70+, 75+, 80+).
     Return a 'data.frame'.

_A_u_t_h_o_r(_s):

     Mathieu Laversanne

_R_e_f_e_r_e_n_c_e_s:

     <URL:
     https://www.iarc.fr/en/publications/pdfs-online/epi/sp95/sp95-chap11.pdf>

_S_e_e _A_l_s_o:

     'csu_ageSpecific' 'csu_eapc' 'csu_trend' 'csu_trendCohortPeriod'

_E_x_a_m_p_l_e_s:

     data(csu_registry_data_1)
     data(csu_registry_data_2)
     
     # you can import your data from csv file using read.csv:
     # mydata <-  read.csv("mydata.csv", sep=",")
     
     # Age standardized rate (ASR) with no missing age cases.
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"))
                                       
     # you can export your result as csv file using write.csv:
     # write.csv(result, file="result.csv")
                                       
     # ASR,  with the percentage of correction due to missing age cases. 
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"),
                                       missing_age = 19,                               
                                       correction_info = TRUE)       
                                       
     # ASR and standard error with missing age.
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       missing_age = 99)
                                       
     # Truncated ASR, 25-69 years.
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       first_age = 6, 
                                       last_age = 14,
                                       missing_age = 99)     
     
     # Truncated ASR, 0-15 with denominator population = 1000000. 
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       first_age = 1, 
                                       last_age = 3, 
                                       missing_age = 99,     
                                       db_rate = 1000000)            
                                       
     # ASR with EURO population as reference (instead of SEGI)
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"),
                                       missing_age = 19,
                       pop_base = "EURO")
     
> 
> 				  
> 				  
> 
> 
> 
> cleanEx()
> nameEx("csu_registry_data_2")
> ### * csu_registry_data_2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_registry_data_2
> ### Title: cancer registry data
> ### Aliases: csu_registry_data_2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(csu_registry_data_2)
> 				  
> # ASR and standard error with missing age.
> result <- csu_asr(csu_registry_data_2, 
+                   "age", "cases", "py",
+                   group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
+                   var_age_group = c("registry_label"), 
+ 				  missing_age = 99,
+                   var_st_err = "st_err")

Population with less than 18 age group:

                         registry_label nb_age_group
                        Brazil, Goiania           17
                  China, Jiashan County           16
                             Costa Rica           16
                         Ecuador, Quito           16
                                Iceland           16
                India, Chennai (Madras)           16
                 India, Mumbay (Bombay)           16
                           India, Poona           16
                           Israel: Jews           16
                           Italy, Parma           17
                 Italy, Ragusa Province           17
                    Philippines, Manila           16
                    Poland, Cracow City           17
                              Singapore           17
                     Singapore: Chinese           17
                       Singapore: Malay           17
                               Slovenia           17
                   Thailand, Chiang Mai           16
                     Thailand, Songkhla           16
                Uganda, Kyadondo County           16
  USA, California, Los Angeles: Chinese           16
 USA, California, Los Angeles: Filipino           16
 USA, California, Los Angeles: Japanese           16
   USA, California, Los Angeles: Korean           16
  USA, California, San Francisco: Black           17
                USA, Connecticut: Black           16
           USA, Georgia, Atlanta: Black           17
                         registry_label nb_age_group

ASR have been computed for the age group 0-99+
> 				  
> #See more examples here:
> help(csu_asr)	
csu_asr                  package:Rcan                  R Documentation

_c_s_u__a_s_r

_D_e_s_c_r_i_p_t_i_o_n:

     'csu_asr' calculate Age-Standardized Rate (ASR) and Truncated
     Age-Stadardized Rate (TASR) across different population (Registry,
     year, sex...)

_U_s_a_g_e:

     csu_asr(df_data,
                     var_age = "age",
                     var_cases = "cases",
                     var_py ="py",
                     group_by=NULL,
                     var_age_group=NULL,
                     missing_age = NULL,
                     db_rate = 100000,
                     first_age = 1,
                     last_age = 18,
                     pop_base = "SEGI",
                     var_st_err = NULL,
                     correction_info = FALSE,
                     var_asr = "asr",
                     age_dropped = FALSE)
     
_A_r_g_u_m_e_n_t_s:

 df_data: Data (need to be R 'data.frame' format, see example to import
          csv file).

 var_age: Age group variable: (numerical) 18 5-years age-group, 0-4,
          5-9, .. 85+ and an optional missing age.
          The value can be 1,2..19, as well as 0,5,..85 or other value
          as long are they are numerical.

var_cases: Number of event (cases, deaths, ...) variable.

  var_py: Population year variable.

group_by: A vector of variables to compare different ASR (sex, country,
          cancer ...).
          Any variable included in the next option var_age_group *must*
          be also include here.

var_age_group: Variables over which the number of population age-group
          might change.
          For example the last age group (70+, 75+, 80+ or 85+) can
          vary across registries, or year, but not across sex.

missing_age: Age value representing the missing age cases.
          If not precise, missing age value will not affect the
          calculation.

 db_rate: The denominator population. Default is 100000.

first_age: First age group included (for Truncated ASR), *must* be
          between 1 and 17. 1 represents 0-4, 2 represents 5-9, ... 5
          represente 20-24 etc.

last_age: Last age group included (for Truncated ASR), *must* be
          between 2 and 18. 2 represents 5-9, ... 5 represente 20-24,
          ... 18 represents 85+ etc.
          To calculate ASR for 15-69 years, use: 'first_age(4),
          last_age(14)'.

pop_base: Select the standard population:

            "SEGI"  SEGI world standard population.           
            "EURO"  EURO is the european standard population. 
           
var_st_err: Calculate the Standard error and name of the new variable.

correction_info: Logical value. if 'TRUE' compute the variable
          "correction" : percentage of missing age cases.

 var_asr: Name of the new variable for the ASR.

age_dropped: Only for truncated ASR.
          Logical value: if 'TRUE', considere the age group not used
          are already dropped from the data.
          First_age and last_age option *must* still be filled.

_D_e_t_a_i_l_s:

     This function take automatically account the number of age group
     (last age group can be 70+,75+,80+,85+):
     If the population data stops before 85+ (75+ for instance), the
     population data *must* be 0 when the population data is unknown
     so, the program can detect automatically the last age group
     (70+,75+,80+ or 85+) for population.

_V_a_l_u_e:

     Give the list of population with less than 18 age group (last age
     group: 70+, 75+, 80+).
     Return a 'data.frame'.

_A_u_t_h_o_r(_s):

     Mathieu Laversanne

_R_e_f_e_r_e_n_c_e_s:

     <URL:
     https://www.iarc.fr/en/publications/pdfs-online/epi/sp95/sp95-chap11.pdf>

_S_e_e _A_l_s_o:

     'csu_ageSpecific' 'csu_eapc' 'csu_trend' 'csu_trendCohortPeriod'

_E_x_a_m_p_l_e_s:

     data(csu_registry_data_1)
     data(csu_registry_data_2)
     
     # you can import your data from csv file using read.csv:
     # mydata <-  read.csv("mydata.csv", sep=",")
     
     # Age standardized rate (ASR) with no missing age cases.
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"))
                                       
     # you can export your result as csv file using write.csv:
     # write.csv(result, file="result.csv")
                                       
     # ASR,  with the percentage of correction due to missing age cases. 
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"),
                                       missing_age = 19,                               
                                       correction_info = TRUE)       
                                       
     # ASR and standard error with missing age.
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       missing_age = 99)
                                       
     # Truncated ASR, 25-69 years.
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       first_age = 6, 
                                       last_age = 14,
                                       missing_age = 99)     
     
     # Truncated ASR, 0-15 with denominator population = 1000000. 
     result <- csu_asr(csu_registry_data_2, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label", "sex", "year", "ethnic" ),
                       var_age_group = c("registry_label"), 
                       var_st_err = "st_err",
                                       first_age = 1, 
                                       last_age = 3, 
                                       missing_age = 99,     
                                       db_rate = 1000000)            
                                       
     # ASR with EURO population as reference (instead of SEGI)
     result <- csu_asr(csu_registry_data_1, 
                       "age", "cases", "py",
                       group_by = c("registry", "registry_label" ),
                       var_age_group = c("registry_label"),
                                       missing_age = 19,
                       pop_base = "EURO")
     
> 				  
> 
> 
> 
> cleanEx()
> nameEx("csu_trend")
> ### * csu_trend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_trend
> ### Title: csu_trend
> ### Aliases: csu_trend
> 
> ### ** Examples
> 
> 
> 	data(csu_registry_data_2)
> 
> 	# you can import your data from csv file using read.csv:
> 	# mydata <-  read.csv("mydata.csv", sep=",")
> 	
> 	# to select only 1 population 
> 	test <- csu_registry_data_2[csu_registry_data_2$registry_label=="Colombia, Cali",]
> 	
> 	# to change sex variable to factor with label
> 	test$sex <- factor(test$sex, levels=c(1,2), labels=c("Male", "Female"))
> 	
> 	# to calculate the asr
> 	df_asr <- csu_asr(test,missing_age = 99,
+                   group_by  = c("registry", "registry_label", "year", "sex"),
+                   var_age_group =  c("registry", "registry_label"))
ASR have been computed for the age group 0-99+
> 	
> 	
> 	# plot ASR ove year, by sex.
> 	csu_trend(df_asr, group_by="sex",
+                 plot_title = "Colombia, Liver")
> 				
> 	# plot ASR over year, by sex, with no smoothing.
> 	csu_trend(df_asr, group_by="sex",
+ 			  plot_title = "Colombia, Liver",
+ 			  smoothing = NULL)
Warning in `[.data.table`(dt_data, , `:=`(smoothing, NULL)) :
  Adding new column 'smoothing' then assigning NULL (deleting it).
> 			  
> 	# plot ASR over year, by sex, with high smoothing.
> 	csu_trend(df_asr, group_by="sex",
+ 			  plot_title = "Colombia, Liver",
+ 			  smoothing = 0.5)
> 				
> 
> 
> 
> cleanEx()
> nameEx("csu_trendCohortPeriod")
> ### * csu_trendCohortPeriod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_trendCohortPeriod
> ### Title: csu_trendCohortPeriod
> ### Aliases: csu_trendCohortPeriod
> 
> ### ** Examples
> 
> 
> 	data(csu_registry_data_2)
> 
> 	# you can import your data from csv file using read.csv:
> 	# mydata <-  read.csv("mydata.csv", sep=",")
> 	
> 	# to select only 1 population 
> 	test <- csu_registry_data_2[csu_registry_data_2$registry == 84020,]
> 	test <- test[test$sex==1,]
> 
> 	
> 	# plot cohort graph from 25-29 years until 75-79 years.
> 	csu_trendCohortPeriod(df_data=test,
+                         missing_age =99,
+                         plot_title = "USA, Liver, males")
> 						
> 	# plot Period graph from 0-5 until 85+.
> 	csu_trendCohortPeriod(df_data=test,
+                         missing_age =99,
+                         plot_title = "USA, Liver, males",
+ 						type="Period",
+ 						first_age=1,
+ 						last_age=18)
> 						
> 	# plot Cohort-Period graph from 30-64 years until 70-74 years.
> 	csu_trendCohortPeriod(df_data=test,
+                         missing_age =99,
+                         plot_title = "USA, Liver, males",
+ 						type="Both",
+ 						first_age=7,
+ 						last_age=15)
> 
> 	# plot Cohort-Period graph from 30-64 years until 70-74 years with Y axis normal scale.
> 	csu_trendCohortPeriod(df_data=test,
+                         missing_age =99,
+                         plot_title = "USA, Liver, males",
+ 						type="Both",
+ 						first_age=7,
+ 						last_age=15,
+ 						logscale=FALSE)
> 						
> 	# plot Cohort graph from 25-29 years until 75-79 years, with data grouped in 2 years period.
> 	csu_trendCohortPeriod(df_data=test,
+ 						  missing_age =99,
+ 						  plot_title = "USA, Liver, males",
+ 						  type="Cohort",
+ 						  year_group = 2)
> 				
> 
> 
> 
> cleanEx()
> nameEx("csu_trend_legend")
> ### * csu_trend_legend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csu_trend_legend
> ### Title: csu_trend_legend
> ### Aliases: csu_trend_legend
> 
> ### ** Examples
> 
> 
> data(csu_registry_data_1)
> 
> csu_ageSpecific(csu_registry_data_1,
+                 group_by="registry_label",
+                 legend=csu_trend_legend(title="registry", position="bottom", nrow = 2),
+                 plot_title = "Legend: bottom")
> 				
> csu_ageSpecific(csu_registry_data_1,
+                 group_by="registry_label",
+                 legend=csu_trend_legend(position="right", right_space_margin = 2),
+                 plot_title = "Legend: right, cut")
> 
> csu_ageSpecific(csu_registry_data_1,
+                 group_by="registry_label",
+                 legend=csu_trend_legend(position="right", right_space_margin = 6.5),
+                 plot_title = "Legend: right")
> 				
> #See more examples here:
> help(csu_ageSpecific)
csu_ageSpecific              package:Rcan              R Documentation

_c_s_u__a_g_e_S_p_e_c_i_f_i_c

_D_e_s_c_r_i_p_t_i_o_n:

     'csu_ageSpecific' calculate and plot Age-Specific Rate.

_U_s_a_g_e:

     csu_ageSpecific(df_data,
                     var_age="age",
                     var_cases="cases",
                     var_py="py",
                     group_by = NULL,
                     missing_age = NULL,
                     db_rate = 100000,
                     legend = csu_trend_legend(),
                     CI5_comparison = NULL,
                     var_rate = "rate",
                     plot_title = "csu_title",
                     format_export = NULL)
     
_A_r_g_u_m_e_n_t_s:

 df_data: Data (need to be R 'data.frame' format, see example to import
          csv file).

 var_age: Age group variable: (numerical) 18 5-years age-group, 0-4,
          5-9, .. 85+ and an optional missing age.
          The value can be 1,2..19, as well as 0,5,..85 or other value
          as long are they are numerical.

var_cases: Number of event (cases, deaths, ...) variable.

  var_py: Population year variable.

group_by: Variable to compare different age specific rate (sex,
          country, cancer ...).
          Only one variable can be chosen.

missing_age: Age value representing the missing age cases.

 db_rate: The denominator population. Default is 100000.

  legend: Legend option: see 'csu_trend_legend'.
          Use only if 'group_by' is not 'NULL'.

CI5_comparison: Add a dotted line represnting the CI5X for a specific
          cancer.
          Value can be a cancer_label (example: "Liver"), or a
          cancer_code (example = 7).
          See 'csu_ci5x_mean' to get the list of possible values.

var_rate: Name of the age specific variable if a dataframe is return.

plot_title: Title of the plot.

format_export: export the graph in different format:

            'NULL'    Plot in R studio windows.                                               
            '"pdf"'   Export in PDF format.                                                   
            '"tiff"'  Export in TIFF 300dpi format.                                           
            '"png"'   Export in PNG 200dpi format.                                            
            '"svg"'   Export in SVG format. Can be edit with <URL: https://inkscape.org/fr/>. 
           
          The filename is the 'plot_title' option.

_D_e_t_a_i_l_s:

     This function calculate and plot the age specific rate.  The
     'group_by' option allow to compare different population or cancer.
     The 'CI5_comparison' option allow to compare with the CI5X and
     therefore test the quality of the data.  If the population data
     stops before 85+ (75+ for instance), the population data *must* be
     0 when the population data is unknown so, the program can detect
     automatically the last age group (70+,75+,80+ or 85+) for
     population.

_V_a_l_u_e:

     Return a plot and a 'data.frame'.

_A_u_t_h_o_r(_s):

     Mathieu Laversanne

_R_e_f_e_r_e_n_c_e_s:

     <URL:
     https://www.iarc.fr/en/publications/pdfs-online/epi/sp95/sp95-chap11.pdf>

_S_e_e _A_l_s_o:

     'csu_asr' 'csu_eapc' 'csu_trend' 'csu_trendCohortPeriod'

_E_x_a_m_p_l_e_s:

             data(csu_registry_data_1)
             data(csu_registry_data_2)
     
             # you can import your data from csv file using read.csv:
             # mydata <-  read.csv("mydata.csv", sep=",")
             
             # to select only 1 population.
             test <- csu_registry_data_1[csu_registry_data_1$registry_label=="Colombia, Cali",]
     
             # plot age specific rate for 1 population.
             csu_ageSpecific(test,
                     plot_title = "Colombia, Liver, male")
                                     
             # plot age specific rate for 1 population, and comparison with CI5X data.
             csu_ageSpecific(test,
                                             plot_title = "Colombia, Liver, male",
                                             CI5_comparison = "Liver")
     
             # plot age specific rate for 4 population, legend at the bottom and comparison with CI5X data.
             csu_ageSpecific(csu_registry_data_1,
                                             group_by="registry_label",
                                             legend=csu_trend_legend(position="bottom", nrow = 2),
                                             plot_title = "Liver, male",
                                             CI5_comparison = 7)
             
             # plot age specific rate for 4 population, legend at the right.
             csu_ageSpecific(csu_registry_data_1,
                                             group_by="registry_label",
                                             legend=csu_trend_legend(position="right", right_space_margin = 6.5),
                                             plot_title = "Liver, male")                                       
     
> 	  		  
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  34.33 1.74 38.12 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
